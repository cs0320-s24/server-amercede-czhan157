JUnit tests should go in this directory.

Make sure you package these classes properly so that you earn the Code Organization Badge!

**Project details**

    Project name:
        CSV
    Team members and contributions:
        amercede - Alexandra Mercedes-Santos
        czhan157 - Caroline Zhang
    Total estimated time it took to complete project:
        26 hours
    A link to your repo:
        https://github.com/cs0320-s24/csv-amercede.git
**Design choices**

    Explain the relationships between classes/interfaces:
        Main calls the searcher class and uses its foundRows method to print out the rows
        that contain an string that the user is looking for. The Searcher method uses the
        Parser class to get the list it needs to more effectively search. The Parser uses the
        CreatorFromRow interface. The Searcher uses the ReturnT class to implement
        CreatorFromRow and uses this. The BrokenReturnT also implements the CreatorFromRow
        interface, but it's used for testing purposes.
    Discuss any specific data structures you used, why you created it, and other high level explanations.
        I used List of

**Errors/Bugs** -- Write reproduction steps for all the bugs in your program.

    Some errors that I have are with my searcher function, It cannot handle looking for items
    that have commas for a specific item in the CSV. It also has extra brackets at the ends of the
    rows, but I'm not sure how to fix this. The user also needs to be very exact with their
    input of the string object they're looking for. The strings at the end of the rows won't be
    able to be searched, because of the brackets.
    The Parser doesn't throw any exceptions or end the program when its being made with
    arguments that are null.

**Tests** -- Explain the testing suites that you implemented for your program and how each test ensures that a part of the program works.
    I made CreatorFromRowTests that tests the FactoryFailureException from the CreatorFromRow
    interface using BrokenReturnT that implements it. SearcherTests shows how the Searcher will keep
    running well with a null columnName. It also shows that there will be a null pointer exception
    thrown when the object is null. ParserTests shows that NullPointerException is thrown when
    returnParser method is called with a null argument.
**How toâ€¦**
    Run the tests you wrote/were provided
        The searcher tests will need a valid file directory to be passed into the created searcher
        class for the tests to work. It will also need other valid inputs.
    Build and run your program
        Call the main class in the the main folder. Follow the prompts given by the main class and
        input the details it asks for. The program will then print out the rows of the object the
        user is searching for.